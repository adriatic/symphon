{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Symphony Application Design Project This website is a structured collection of documents describing the details of Project Symphony, depicted below. Image 1 Strapi, defined as the leading open-source headless CMS, is 100% Javascript, fully customizable and developer-first. Symphony is a \"full-stack application\", specifically designed to show Strapi in as many contexts as possible. In contrast with Strapi tutorials and blogs , Symphony is a real distributed application utilizing Strapi based back end, combined with many distributed services, demonstrating how to use the information in Strapi Guides, how to write multiple Strapi plugins, how to use some of the key Identity Management Services, etc. At the moment we envision that Symphony will be a part of the Strapi Write for the Community effort. This site is generated with mkdocs tool. To maintain it be aware that all persistent information consists of: mkdocs.yml file at https://github.com/adriatic/symphony-docs/blob/master/mkdocs.yml markdown files in the docs folder: https://github.com/adriatic/symphony-docs/tree/master/docs Typical update process consists of updating or adding markdown files in the docs folder and making the correspondent changes to the mkdocs.yml file. To make your changes persistent, commit and push the changes from the root folder (in my case the folder at c:\\work\\symphony\\symphony-docs ). In order to regenerate the site, run the command mkdocs gh-deploy from the same (root) folder. The updated host site is in the gh-pages branch - https://github.com/adriatic/symphony-docs/tree/gh-pages : \u03bb mkdocs gh-deploy INFO - Cleaning site directory INFO - Building documentation to directory: c:\\work\\symphony\\symphony-docs\\site INFO - Documentation built in 0.17 seconds INFO - Copying 'c:\\work\\symphony\\symphony-docs\\site' to 'gh-pages' branch and pushing to GitHub. INFO - Your documentation should shortly be available at: https://adriatic.github.io/symphony-docs/","title":"Home"},{"location":"#symphony-application-design-project","text":"This website is a structured collection of documents describing the details of Project Symphony, depicted below. Image 1 Strapi, defined as the leading open-source headless CMS, is 100% Javascript, fully customizable and developer-first. Symphony is a \"full-stack application\", specifically designed to show Strapi in as many contexts as possible. In contrast with Strapi tutorials and blogs , Symphony is a real distributed application utilizing Strapi based back end, combined with many distributed services, demonstrating how to use the information in Strapi Guides, how to write multiple Strapi plugins, how to use some of the key Identity Management Services, etc. At the moment we envision that Symphony will be a part of the Strapi Write for the Community effort. This site is generated with mkdocs tool. To maintain it be aware that all persistent information consists of: mkdocs.yml file at https://github.com/adriatic/symphony-docs/blob/master/mkdocs.yml markdown files in the docs folder: https://github.com/adriatic/symphony-docs/tree/master/docs Typical update process consists of updating or adding markdown files in the docs folder and making the correspondent changes to the mkdocs.yml file. To make your changes persistent, commit and push the changes from the root folder (in my case the folder at c:\\work\\symphony\\symphony-docs ). In order to regenerate the site, run the command mkdocs gh-deploy from the same (root) folder. The updated host site is in the gh-pages branch - https://github.com/adriatic/symphony-docs/tree/gh-pages : \u03bb mkdocs gh-deploy INFO - Cleaning site directory INFO - Building documentation to directory: c:\\work\\symphony\\symphony-docs\\site INFO - Documentation built in 0.17 seconds INFO - Copying 'c:\\work\\symphony\\symphony-docs\\site' to 'gh-pages' branch and pushing to GitHub. INFO - Your documentation should shortly be available at: https://adriatic.github.io/symphony-docs/","title":"Symphony Application Design Project"},{"location":"about/","text":"About Symphony Image 1 Symphony is the code name for the project proposing to build a relatively complex distributed application intended to become a part of the Strapi community created advanced education tool. It is assumed that a group of Strapi Community volunteers will participate in all aspects of Symphony creation: Architecture Design Implementation Deployment Since the Symphony app aims to illustrate all modern concepts (starting with Identity Management - aka Authentication and Authorization) we plan to present the use of several alternative services (AUTH0, AWS AIM, OKTA, Microsoft IAM). Similarly we plan to make use of several available variants of any other service that are of importance to our app.","title":"About"},{"location":"about/#about-symphony","text":"Image 1 Symphony is the code name for the project proposing to build a relatively complex distributed application intended to become a part of the Strapi community created advanced education tool. It is assumed that a group of Strapi Community volunteers will participate in all aspects of Symphony creation: Architecture Design Implementation Deployment Since the Symphony app aims to illustrate all modern concepts (starting with Identity Management - aka Authentication and Authorization) we plan to present the use of several alternative services (AUTH0, AWS AIM, OKTA, Microsoft IAM). Similarly we plan to make use of several available variants of any other service that are of importance to our app.","title":"About Symphony"},{"location":"architecture/","text":"Architecture Introduction Symphony is primary a teaching tool, intended to cover all application types of interest, on all platforms (Linux, MacOS, Windows), using all distributed services of interest. This approach is a improvement over the current collection of tutorials like Build a blog with React, Strapi and Apollo mostly written by Maxime Castres and defined as: tutorials on how to make blogs using Strapi with a lot of frontend frameworks: Gatsby Old, Gatsby new, Next.js, Vue, Nuxt or Angular. Key properties Symphony is a single application All current Strapi tutorials describe the process of creation of a blog application on different platforms, using different front end frameworks, different back ends. This can be restated as \"use a single small app in different contexts, where each specific element of that set is a separate blog application kept in its own repository. See https://github.com/strapi/strapi-starter-react-blog as an example. Symphony is a sufficiently complex distributed application, capable of demonstrating the context of all current Strapi samples, and (important) it has a practical value for many Strapi (and other) users - see Symphony application model for more details. Besides being a single source code application Symphony will be used by Strapi developers as the testbed in the process of creating the official support for many services of interest to Strapi users. The first such service is the Identity Management (aka Authentication and Authorization, which is a misnomer as IM offers a lot more than just Authentication and Authorization). Here follows the sketch of Symphony","title":"Architecture"},{"location":"architecture/#architecture","text":"","title":"Architecture"},{"location":"architecture/#introduction","text":"Symphony is primary a teaching tool, intended to cover all application types of interest, on all platforms (Linux, MacOS, Windows), using all distributed services of interest. This approach is a improvement over the current collection of tutorials like Build a blog with React, Strapi and Apollo mostly written by Maxime Castres and defined as: tutorials on how to make blogs using Strapi with a lot of frontend frameworks: Gatsby Old, Gatsby new, Next.js, Vue, Nuxt or Angular.","title":"Introduction"},{"location":"architecture/#key-properties","text":"Symphony is a single application All current Strapi tutorials describe the process of creation of a blog application on different platforms, using different front end frameworks, different back ends. This can be restated as \"use a single small app in different contexts, where each specific element of that set is a separate blog application kept in its own repository. See https://github.com/strapi/strapi-starter-react-blog as an example. Symphony is a sufficiently complex distributed application, capable of demonstrating the context of all current Strapi samples, and (important) it has a practical value for many Strapi (and other) users - see Symphony application model for more details. Besides being a single source code application Symphony will be used by Strapi developers as the testbed in the process of creating the official support for many services of interest to Strapi users. The first such service is the Identity Management (aka Authentication and Authorization, which is a misnomer as IM offers a lot more than just Authentication and Authorization). Here follows the sketch of Symphony","title":"Key properties"},{"location":"deployment/","text":"Deployment Phase 0 The Project Symphony starts with the building of the Github gh-pages resident website, which serves as a complete set of markdown pages describing this project (purpose, mode, architecture, etc): Image 1 Phase 1 Start with the process described as Deploying a Strapi API on Heroku Phase 2 Switch to more general process Quickly deploy Strapi to any cloud with Platform.sh Image 2 Note This ( ONE CLICK DEPLOY BUTTON ) process will be described with greater details than in the existing blog article. It will become part of the Development Environment document","title":"Deployment"},{"location":"deployment/#deployment","text":"","title":"Deployment"},{"location":"deployment/#phase-0","text":"The Project Symphony starts with the building of the Github gh-pages resident website, which serves as a complete set of markdown pages describing this project (purpose, mode, architecture, etc): Image 1","title":"Phase 0"},{"location":"deployment/#phase-1","text":"Start with the process described as Deploying a Strapi API on Heroku","title":"Phase 1"},{"location":"deployment/#phase-2","text":"Switch to more general process Quickly deploy Strapi to any cloud with Platform.sh Image 2 Note This ( ONE CLICK DEPLOY BUTTON ) process will be described with greater details than in the existing blog article. It will become part of the Development Environment document","title":"Phase 2"},{"location":"design/","text":"Design","title":"Design"},{"location":"design/#design","text":"","title":"Design"},{"location":"development-environment/","text":"Development Environment Development Environment This is the first draft of final document - it will grow with Symphony project advancements We plan to define the recommended development environment as a collection of the following tools (note that platform (Linux, MacOS Windows)) is the mot important guideline Sofware tools VS Code platform.sh figma prototyping Chrome browser 1 Brave browser 1 Firefox browser 1 react , vue , svelte frameworks Node , npm / yarn Sources repository lerna yarn workspaces all browsers include developer extensions for all frameworks \u21a9 \u21a9 \u21a9","title":"Development Environment"},{"location":"development-environment/#development-environment","text":"Development Environment This is the first draft of final document - it will grow with Symphony project advancements We plan to define the recommended development environment as a collection of the following tools (note that platform (Linux, MacOS Windows)) is the mot important guideline","title":"Development Environment"},{"location":"development-environment/#sofware-tools","text":"VS Code platform.sh figma prototyping Chrome browser 1 Brave browser 1 Firefox browser 1 react , vue , svelte frameworks Node , npm / yarn","title":"Sofware tools"},{"location":"development-environment/#sources-repository","text":"lerna yarn workspaces all browsers include developer extensions for all frameworks \u21a9 \u21a9 \u21a9","title":"Sources repository"},{"location":"implementation/","text":"Implementation","title":"Implementation"},{"location":"implementation/#implementation","text":"","title":"Implementation"},{"location":"important-notes/","text":"Important Notes Why is Kubernetes getting so popular?","title":"Important Notes"},{"location":"important-notes/#important-notes","text":"Why is Kubernetes getting so popular?","title":"Important Notes"},{"location":"model/","text":"Symphony Application Model Image 1 The application to be developed is envisioned as the state of the art \"family tree\" combo - blog, threaded discussions, cloud based images as illustrated on Image 2 below Image 2","title":"Model"},{"location":"model/#symphony-application-model","text":"Image 1 The application to be developed is envisioned as the state of the art \"family tree\" combo - blog, threaded discussions, cloud based images as illustrated on Image 2 below Image 2","title":"Symphony Application Model"},{"location":"samples/","text":"Samples While Symphony project has some ambitious goals, the initial set of deliverables is quite modest: create a collection of full stack samples where Strapi app is as the backend, connected with many frontends (one for each front end framework Strapi customers care about). The backend side is just a minimal skeleton, sufficient support the Identity Management feature we plan to illustrate. Here is a placeholder for the real list of samples (taken from https://github.com/strapi/strapi-examples) Hello World - Basic app to say hello to everyone routes controllers i18n Cheesecakes - e-commerce application routes controllers models services relations auth Gatsby Strapi Tutorial - Source code of the tutorial \"Building a static blog using Gatsby and Strapi\". gatsby static website content API React Authentication Flow - Basic React App that implements the authentication flow auth react Jekyll Strapi Tutorial - Source code of the tutorial \"Building a static blog using Jekyll and Strapi\". jekyll static website content API Create-React-App - Basic React App Boilerplate that has the authentication with local and custom providers. auth react React-Apollo - Basic React App Boilerplate that use the GraphQL API when the GraphQL plugin is installed in your project. auth react graphql GraphQL Upload with React-Apollo - React App that use the GraphQL upload mutation when the GraphQL plugin is installed in your project. auth react graphql Nuxt Strapi Tutorial - Source code of the tutorial \"\ud83c\udf5d Cooking a Deliveroo clone with Nuxt (Vue.js), GraphQL, Strapi and Stripe\". Nuxt GraphQL Stripe Vue Nextjs Strapi Tutorial - Source code of the tutorial \"\ud83c\udf5d Cooking a Deliveroo clone with Next.js (React.js), GraphQL, Strapi and Stripe\". Next.js GraphQL Stripe React","title":"Samples"},{"location":"samples/#samples","text":"While Symphony project has some ambitious goals, the initial set of deliverables is quite modest: create a collection of full stack samples where Strapi app is as the backend, connected with many frontends (one for each front end framework Strapi customers care about). The backend side is just a minimal skeleton, sufficient support the Identity Management feature we plan to illustrate. Here is a placeholder for the real list of samples (taken from https://github.com/strapi/strapi-examples) Hello World - Basic app to say hello to everyone routes controllers i18n Cheesecakes - e-commerce application routes controllers models services relations auth Gatsby Strapi Tutorial - Source code of the tutorial \"Building a static blog using Gatsby and Strapi\". gatsby static website content API React Authentication Flow - Basic React App that implements the authentication flow auth react Jekyll Strapi Tutorial - Source code of the tutorial \"Building a static blog using Jekyll and Strapi\". jekyll static website content API Create-React-App - Basic React App Boilerplate that has the authentication with local and custom providers. auth react React-Apollo - Basic React App Boilerplate that use the GraphQL API when the GraphQL plugin is installed in your project. auth react graphql GraphQL Upload with React-Apollo - React App that use the GraphQL upload mutation when the GraphQL plugin is installed in your project. auth react graphql Nuxt Strapi Tutorial - Source code of the tutorial \"\ud83c\udf5d Cooking a Deliveroo clone with Nuxt (Vue.js), GraphQL, Strapi and Stripe\". Nuxt GraphQL Stripe Vue Nextjs Strapi Tutorial - Source code of the tutorial \"\ud83c\udf5d Cooking a Deliveroo clone with Next.js (React.js), GraphQL, Strapi and Stripe\". Next.js GraphQL Stripe React","title":"Samples"},{"location":"skeletons/","text":"Skeletons","title":"Skeletons"},{"location":"skeletons/#skeletons","text":"","title":"Skeletons"},{"location":"software-requirements/","text":"Software Requirements Software requirements documents provide an important map of the product being built, the features that will be included and much more. This roadmap helps to keep the technical and non-technical team on the same wavelength as to what the expectations are. It helps to ensure that the product is built meeting the needs whether it\u2019s for internal purposes, for users or clients. 1 1. Introduction 1.1 Purpose: Set the expectations for the outcome of the product. 1.2 Intended Audience: Who is the software for? Who is the end-user? Will the software be used internally at a company or externally? 1.3 Intended Use: What is the software for? What problem is it solving? This application should be serving several roles: teaching tool for people interested in creating a complex distributed app with Strapi model to help Strapi core team to test and verify the new plugins (Identity Management being one of them - but not the only one) 1.4 Scope: Explain the scope of the software. What are the main goals and objectives? How do they relate to the company\u2019s goals? 1.5 Definitions and Acronyms: Provide an overview of any definitions the reader should understand before reading on. 2. Overall Description: Describe what you are building and for who. 2.1 User Needs: Explain the user needs for this software. 2.2 Assumptions and Dependencies: What assumptions are you making that could cause an error in your approach? Is the project reliant on any other factors that could affect the development of the software? 3. System Features and Requirements 3.1 Functional Requirements: Take time to define the functional requirements that are essential for the software to build. 3.2 External Interface Requirements: Are there any UX and UI requirements that you must keep in mind as you build? 3.3 System Features: What features are required for the software to even work. 3.4 Nonfunctional Requirements: Are there any non-functional requirements that you need to address (i.e. budget, team, etc.) Citation from BIT.AI \u21a9","title":"Software Requirements"},{"location":"software-requirements/#software-requirements","text":"Software requirements documents provide an important map of the product being built, the features that will be included and much more. This roadmap helps to keep the technical and non-technical team on the same wavelength as to what the expectations are. It helps to ensure that the product is built meeting the needs whether it\u2019s for internal purposes, for users or clients. 1","title":"Software Requirements"},{"location":"software-requirements/#1-introduction","text":"1.1 Purpose: Set the expectations for the outcome of the product. 1.2 Intended Audience: Who is the software for? Who is the end-user? Will the software be used internally at a company or externally? 1.3 Intended Use: What is the software for? What problem is it solving? This application should be serving several roles: teaching tool for people interested in creating a complex distributed app with Strapi model to help Strapi core team to test and verify the new plugins (Identity Management being one of them - but not the only one) 1.4 Scope: Explain the scope of the software. What are the main goals and objectives? How do they relate to the company\u2019s goals? 1.5 Definitions and Acronyms: Provide an overview of any definitions the reader should understand before reading on.","title":"1. Introduction"},{"location":"software-requirements/#2-overall-description-describe-what-you-are-building-and-for-who","text":"2.1 User Needs: Explain the user needs for this software. 2.2 Assumptions and Dependencies: What assumptions are you making that could cause an error in your approach? Is the project reliant on any other factors that could affect the development of the software?","title":"2. Overall Description: Describe what you are building and for who."},{"location":"software-requirements/#3-system-features-and-requirements","text":"3.1 Functional Requirements: Take time to define the functional requirements that are essential for the software to build. 3.2 External Interface Requirements: Are there any UX and UI requirements that you must keep in mind as you build? 3.3 System Features: What features are required for the software to even work. 3.4 Nonfunctional Requirements: Are there any non-functional requirements that you need to address (i.e. budget, team, etc.) Citation from BIT.AI \u21a9","title":"3. System Features and Requirements"},{"location":"symphony-application/","text":"Symphony Application","title":"Symphony Application"},{"location":"symphony-application/#symphony-application","text":"","title":"Symphony Application"}]}